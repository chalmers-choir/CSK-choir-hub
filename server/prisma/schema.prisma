generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email        String @unique
  username     String @unique
  passwordHash String
  firstName    String
  lastName     String

  dietaryPreferences String?

  groups Group[]
  roles  Role[]

  attendances   EventAttendance[]
  registrations EventRegistration[]
  songKnowledge SongKnowledge[]
}

enum GroupType {
  CHOIR
  VOICE
  COMMITTEE
  OTHER
}

model Group {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String    @unique
  type      GroupType

  description String?

  members User[]

  parents  Group[] @relation("GroupHierarchy")
  children Group[] @relation("GroupHierarchy")

  roles Role[]
}

model Role {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique

  description String?
  groups      Group[]

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

enum EventType {
  REHEARSAL
  CONCERT
  GIG
  PARTY
  MEETING
  OTHER
}

model Event {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  type      EventType

  dateStart   DateTime
  dateEnd     DateTime
  place       String
  description String?

  requiresAttendance   Boolean @default(false)
  requiresRegistration Boolean @default(false)

  attendances   EventAttendance[]
  registrations EventRegistration[]
}

enum AttendanceStatus {
  PRESENT
  ABSENT
}

model EventAttendance {
  userId  Int
  eventId Int
  status  AttendanceStatus

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@id([userId, eventId])
  @@index([eventId])
  @@index([userId])
}

model EventRegistration {
  userId    Int
  eventId   Int
  createdAt DateTime @default(now())

  comments           String?
  dietaryPreferences String?

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@id([userId, eventId])
  @@index([eventId])
  @@index([userId])
}

model Book {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  songs Song[]
}

model Song {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String

  page          Int?
  startingTones String?

  books Book[]

  voices        Voice[]
  tags          Tag[]
  songKnowledge SongKnowledge[]
}

enum KnowledgeLevel {
  OK
  GIG
  UTANTILL
}

model SongKnowledge {
  userId Int
  songId Int
  voice  Voice

  level KnowledgeLevel

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  song Song @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@id([userId, songId, voice])
  @@index([songId])
  @@index([userId])
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  songs Song[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Voice {
  S
  S1
  S2
  A
  A1
  A2
  T
  T1
  T2
  B
  B1
  B2
}

enum Choir {
  MK
  DK
  KK
}
