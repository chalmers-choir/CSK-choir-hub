openapi: 3.0.4
info:
  title: CSK Choir Hub
  description: This is the API declaration for CSK Choir Hub.
  contact:
    email: webmasters@choir.chs.chalmers.se
  version: 1.0.0
externalDocs:
  description: Find out more about CSK
  url: https://chalmerssangkor.se
servers:
  - url: https://portal.chalemrssangkor.se/api
tags:
  - name: auth
    description: Authentication operations
  - name: books
    description: Operations related to books
  - name: songs
    description: Operations related to songs
  - name: users
    description: Operations related to users
  - name: events
    description: Operations related to events
  - name: roles
    description: Operations related to roles
  - name: groups
    description: Operations related to groups
  - name: tags
    description: Operations related to tags

paths:
  /auth/register:
    post:
      tags:
        - auth
      summary: Register a new user.
      description: Creates a new user account.
      operationId: registerUser
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Token missing or access denied.
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags:
        - auth
      summary: Login a user.
      description: Authenticates a user and returns a token.
      operationId: loginUser
      requestBody:
        description: User credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '400':
          description: Invalid username or password.
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /books:
    get:
      tags:
        - books
      summary: Get all books.
      description: Gets the full list of all books.
      operationId: getBooks
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '400':
          description: Token missing or access denied.
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - books
      summary: Add a new book.
      description: Adds a new book to the collection.
      operationId: addBook
      requestBody:
        description: Book object that needs to be added to the collection
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
          application/xml:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
            application/xml:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Token missing or access denied.
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /books/{bookId}:
    get:
      tags:
        - books
      summary: Find book by ID.
      description: Returns a single book.
      operationId: getBookById
      parameters:
        - name: bookId
          in: path
          description: ID of book to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
            application/xml:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Token missing or access denied.
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - books
      summary: Deletes a book.
      description: Deletes a book by ID.
      operationId: deleteBook
      parameters:
        - name: bookId
          in: path
          description: Book id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Successful operation
        '400':
          description: Token missing or access denied.
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /books/{bookId}/songs:
    post:
      tags:
        - books
      summary: Add a song to a book.
      description: Adds a song to the specified book.
      operationId: addSongToBook
      parameters:
        - name: bookId
          in: path
          description: ID of the book
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Song to add to book
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                songId:
                  type: integer
                  format: int64
              required:
                - songId
      responses:
        '200':
          description: Successful operation, returns updated Book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Token missing or access denied.
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /books/{bookId}/songs/{songId}:
    delete:
      tags:
        - books
      summary: Remove a song from a book.
      description: Removes a song from the specified book.
      operationId: removeSongFromBook
      parameters:
        - name: bookId
          in: path
          description: ID of the book
          required: true
          schema:
            type: integer
            format: int64
        - name: songId
          in: path
          description: ID of the song to remove
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Song removed from book successfully
        '400':
          description: Token missing or access denied.
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /events:
    get:
      tags:
        - events
      summary: Get all events.
      description: Gets the full list of all events.
      operationId: getEvents
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
            application/xml:
              schema:
                type: array
                items:
                  type: object
        '400':
          description: Token missing or access denied.
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - events
      summary: Add a new event.
      description: Adds a new event to the collection.
      operationId: addEvent
      requestBody:
        description: Event object that needs to be added to the collection
        required: true
        content:
          application/json:
            schema:
              type: object
          application/xml:
            schema:
              type: object
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
            application/xml:
              schema:
                type: object
        '400':
          description: Token missing or access denied.
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'

  /events/{eventId}:
    put:
      tags:
        - events
      summary: Update an event.
      description: Updates an existing event by ID.
      operationId: updateEvent
      parameters:
        - name: id
          in: path
          description: ID of the event to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Event object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              type: object
          application/xml:
            schema:
              type: object
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
            application/xml:
              schema:
                type: object
        '400':
          description: Token missing or access denied.
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - events
      summary: Deletes an event.
      description: Deletes an event by ID.
      operationId: deleteEvent
      parameters:
        - name: id
          in: path
          description: Event id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Successful operation
        '400':
          description: Token missing or access denied.
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /events/{eventId}/registration:
    post:
      tags:
        - events
      summary: Mark registration for an event.
      description: Marks a user's registration for the specified event.
      operationId: markRegistration
      parameters:
        - name: id
          in: path
          description: ID of the event
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Attendance details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  format: int64
              required:
                - userId
      responses:
        '200':
          description: Successful operation, returns updated Event
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Token missing or access denied.
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - events
      summary: Unmark registration for an event.
      description: Removes a user's registration for the specified event.
      operationId: unmarkRegistration
      parameters:
        - name: id
          in: path
          description: ID of the event
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Attendance details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  format: int64
              required:
                - userId
      responses:
        '204':
          description: Attendance unmarked successfully
        '400':
          description: Token missing or access denied.
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /events/{eventId}/attendance:
    put:
      tags:
        - events
      summary: Mark attendance for an event.
      description: Marks a user's attendance for the specified event.
      operationId: markAttendance
      parameters:
        - name: id
          in: path
          description: ID of the event
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Attendance details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  format: int64
              required:
                - userId
      responses:
        '200':
          description: Successful operation, returns updated Event
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Token missing or access denied.
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /groups:
    get:
      tags:
        - groups
      summary: Get all groups.
      description: Gets the full list of all groups.
      operationId: getGroups
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
            application/xml:
              schema:
                type: array
                items:
                  type: object
        '400':
          description: Token missing or access denied.
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - groups
      summary: Add a new group.
      description: Adds a new group to the collection.
      operationId: addGroup
      requestBody:
        description: Group object that needs to be added to the collection
        required: true
        content:
          application/json:
            schema:
              type: object
          application/xml:
            schema:
              type: object
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
            application/xml:
              schema:
                type: object
        '400':
          description: Token missing or access denied.
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups/{groupId}:
    put:
      tags:
        - groups
      summary: Updates a group
      description: Add or change information regarding a group
      operationId: addGroup
      requestBody:
        description: Group object that needs to be added to the collection
        required: true
        content:
          application/json:
            schema:
              type: object
          application/xml:
            schema:
              type: object
      responses:
        '204':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
            application/xml:
              schema:
                type: object
        '400':
          description: Token missing or access denied.
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - groups
      summary: Deletes a group.
      description: Deletes a group by ID.
      operationId: deleteGroup
      responses:
        '204':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
            application/xml:
              schema:
                type: object
        '400':
          description: Token missing or access denied.
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /roles:
    get:
      tags:
        - roles
      summary: Get all roles.
      description: Gets the full list of all roles.
      operationId: getRoles
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
            application/xml:
              schema:
                type: array
                items:
                  type: object
        '400':
          description: Token missing or access denied.
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - roles
      summary: Add a new role.
      description: Adds a new role to the collection.
      operationId: addRole
      requestBody:
        description: Group object that needs to be added to the collection
        required: true
        content:
          application/json:
            schema:
              type: object
          application/xml:
            schema:
              type: object
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
            application/xml:
              schema:
                type: object
        '400':
          description: Token missing or access denied.
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /roles/{roleId}:
    delete:
      tags:
        - roles
      summary: Deletes a role.
      description: Deletes a role by ID.
      operationId: deleteRole
      responses:
        '204':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
            application/xml:
              schema:
                type: object
        '400':
          description: Token missing or access denied.
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /roles/{roleId}/user:
    put:
      tags:
        - roles
      summary: Assigns a user to a role.
      description: Assigns a user to a role by ID.
      operationId: assignUserToRole
      responses:
        '204':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
            application/xml:
              schema:
                type: object
        '400':
          description: Token missing or access denied.
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - roles
      summary: Removes a user from a role.
      description: Assigns a user to a role by ID.
      operationId: assignUserToRole
      responses:
        '204':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
            application/xml:
              schema:
                type: object
        '400':
          description: Token missing or access denied.
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /songs:
    get:
      tags:
        - songs
    post:
      tags:
        - songs
  /songs/{songId}:
    delete:
      tags:
        - songs
  /songs/{songId}/tags:
    post:
      tags:
        - songs
    delete:
      tags:
        - songs

  /tags:
    get:
      tags:
        - tags
    post:
      tags:
        - tags
  /tags/{tagId}:
    delete:
      tags:
        - tags

  /users:
    get:
      tags:
        - users

  /users/{userId}:
    get:
      tags:
        - users
    delete:
      tags:
        - users

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
      xml:
        name: user
    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: The Great Gatsby
      required:
        - id
        - title
      xml:
        name: book
    Song:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        page:
          type: integer
        startingTones:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
